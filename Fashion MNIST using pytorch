{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classifying Fashion-MNIST\n",
    "\n",
    "Now it's your turn to build and train a neural network. You'll be using the [Fashion-MNIST dataset](https://github.com/zalandoresearch/fashion-mnist), a drop-in replacement for the MNIST dataset. MNIST is actually quite trivial with neural networks where you can easily achieve better than 97% accuracy. Fashion-MNIST is a set of 28x28 greyscale images of clothes. It's more complex than MNIST, so it's a better representation of the actual performance of your network, and a better representation of datasets you'll use in the real world.\n",
    "\n",
    "<img src='assets/fashion-mnist-sprite.png' width=500px>\n",
    "\n",
    "In this notebook, you'll build your own neural network. For the most part, you could just copy and paste the code from Part 3, but you wouldn't be learning. It's important for you to write the code yourself and get it to work. Feel free to consult the previous notebooks though as you work through this.\n",
    "\n",
    "First off, let's load the dataset through torchvision."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz\n",
      "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz\n",
      "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz\n",
      "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz\n",
      "Processing...\n",
      "Done!\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "from torchvision import datasets, transforms\n",
    "import helper\n",
    "\n",
    "# Define a transform to normalize the data\n",
    "transform = transforms.Compose([transforms.ToTensor(),\n",
    "                                transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n",
    "# Download and load the training data\n",
    "trainset = datasets.FashionMNIST('~/.pytorch/F_MNIST_data/', download=True, train=True, transform=transform)\n",
    "trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)\n",
    "\n",
    "# Download and load the test data\n",
    "testset = datasets.FashionMNIST('~/.pytorch/F_MNIST_data/', download=True, train=False, transform=transform)\n",
    "testloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we can see one of the images."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "image, label = next(iter(trainloader))\n",
    "helper.imshow(image[0,:]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Building the network\n",
    "\n",
    "Here you should define your network. As with MNIST, each image is 28x28 which is a total of 784 pixels, and there are 10 classes. You should include at least one hidden layer. We suggest you use ReLU activations for the layers and to return the logits or log-softmax from the forward pass. It's up to you how many layers you add and the size of those layers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Define your network architecture here\n",
    "from torch import nn\n",
    "import torch.nn.functional as F\n",
    "class FMnist(nn.Module):\n",
    "    def __init__(self, n_input, n_hidden, n_out):\n",
    "        super().__init__() \n",
    "        self.lin1 = nn.Linear(n_input, n_hidden[0]) \n",
    "        self.lin2 = nn.Linear(n_hidden[0], n_hidden[1])\n",
    "        self.lin3 = nn.Linear(n_hidden[1], n_hidden[2])\n",
    "        self.out  = nn.Linear(n_hidden[2], n_out)\n",
    "        \n",
    "        self.relu = nn.ReLU()\n",
    "    \n",
    "    def forward(self, x):\n",
    "        x = x.view(x.shape[0], -1)\n",
    "        x = self.relu(self.lin1(x)) \n",
    "        x = self.relu(self.lin2(x)) \n",
    "        x = self.relu(self.lin3(x)) \n",
    "        x = F.log_softmax(self.out(x), dim=1)        \n",
    "        return x "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train the network\n",
    "\n",
    "Now you should create your network and train it. First you'll want to define [the criterion](http://pytorch.org/docs/master/nn.html#loss-functions) ( something like `nn.CrossEntropyLoss`) and [the optimizer](http://pytorch.org/docs/master/optim.html) (typically `optim.SGD` or `optim.Adam`).\n",
    "\n",
    "Then write the training code. Remember the training pass is a fairly straightforward process:\n",
    "\n",
    "* Make a forward pass through the network to get the logits \n",
    "* Use the logits to calculate the loss\n",
    "* Perform a backward pass through the network with `loss.backward()` to calculate the gradients\n",
    "* Take a step with the optimizer to update the weights\n",
    "\n",
    "By adjusting the hyperparameters (hidden units, learning rate, etc), you should be able to get the training loss below 0.4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Create the network, define the criterion and optimizer\n",
    "from torch import optim\n",
    "img = image.view(64,-1) \n",
    "n_input = img.shape[1] \n",
    "n_hidden = [256, 128, 64] \n",
    "n_out = 10 \n",
    "\n",
    "model = FMnist(n_input, n_hidden, n_out) \n",
    "criterion = nn.NLLLoss() \n",
    "optimizer = optim.SGD(model.parameters(), lr = 0.01, momentum = 0.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch : 1 ->> Loss : 0.6353353993343646\n",
      "Epoch : 2 ->> Loss : 0.4019617831497304\n",
      "Epoch : 3 ->> Loss : 0.35512949413518663\n",
      "Epoch : 4 ->> Loss : 0.3305259500262834\n",
      "Epoch : 5 ->> Loss : 0.3106066774584845\n",
      "Epoch : 6 ->> Loss : 0.29268961334660615\n",
      "Epoch : 7 ->> Loss : 0.277831269193814\n",
      "Epoch : 8 ->> Loss : 0.2698358050636899\n",
      "Epoch : 9 ->> Loss : 0.25514042468816994\n",
      "Epoch : 10 ->> Loss : 0.24635046006424594\n"
     ]
    }
   ],
   "source": [
    "# TODO: Train the network here\n",
    "num_epochs = 10\n",
    "for epoch in range(num_epochs):\n",
    "    overall_loss = 0\n",
    "    for images, labels in trainloader:\n",
    "        images = images.view(images.shape[0], -1) \n",
    "        #zero the grad \n",
    "        optimizer.zero_grad() \n",
    "        #get prediction\n",
    "        predictions = model(images) \n",
    "        #calc the loss \n",
    "        loss = criterion(predictions, labels) \n",
    "        #back prop \n",
    "        loss.backward() \n",
    "        #update weights \n",
    "        optimizer.step()\n",
    "        #get overall loss  \n",
    "        overall_loss += loss.item()\n",
    "    print(\"Epoch : {} ->> Loss : {}\".format(epoch+1, (overall_loss/len(trainloader))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x648 with 2 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 204,
       "width": 423
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "import helper\n",
    "\n",
    "# Test out your network!\n",
    "\n",
    "dataiter = iter(testloader)\n",
    "images, labels = dataiter.next()\n",
    "img = images[0]\n",
    "# Convert 2D image to 1D vector\n",
    "img = img.resize_(1, 784)\n",
    "\n",
    "# TODO: Calculate the class probabilities (softmax) for img\n",
    "ps = torch.exp(model(img))\n",
    "\n",
    "# Plot the image and probabilities\n",
    "helper.view_classify(img.resize_(1, 28, 28), ps, version='Fashion')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
